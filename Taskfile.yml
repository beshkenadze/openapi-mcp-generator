version: '3'

vars:
  # Prism mock server
  PRISM_PORT: "4010"
  SPEC_PATH: packages/samples/petstore-v3.yaml
  # Generated server output
  GEN_OUT: servers/petstore-mcp
  GEN_NAME: petstore-mcp

tasks:
  install:
    desc: Install all workspace dependencies
    cmds:
      - bun install

  typecheck:
    desc: TypeScript project-wide type checking
    cmds:
      - bun run typecheck

  build:
    desc: Build all packages (Turbo pipeline)
    cmds:
      - bun run build

  gen:petstore:
    desc: Generate MCP server from the sample Petstore spec
    cmds:
      - task: build:core
      - bash -lc 'rm -rf {{.GEN_OUT}}'
      - bun run packages/cli/src/index.ts -- --input {{.SPEC_PATH}} --out {{.GEN_OUT}} --name {{.GEN_NAME}} --runtime bun --force

  install:petstore:
    desc: Install dependencies in the generated Petstore server
    dir: "{{.GEN_OUT}}"
    cmds:
      - bun install

  prism:mock:
    desc: Run Prism mock server against the sample spec
    cmds:
      - bunx @stoplight/prism-cli mock {{.SPEC_PATH}} --port {{.PRISM_PORT}} --cors --dynamic

  prism:inspect:cli:
    desc: Generate server, run Prism, and list tools via MCP Inspector CLI
    cmds:
      - task: gen:petstore
      - |
        bash -lc '
        set -eo pipefail
        # Start Prism if not already listening on PRISM_PORT
        STARTED_PRISM=0
        if bash -c "exec 3<>/dev/tcp/127.0.0.1/{{.PRISM_PORT}}" 2>/dev/null; then
          echo "Reusing existing Prism on port {{.PRISM_PORT}}"
        else
          bunx @stoplight/prism-cli mock {{.SPEC_PATH}} --port {{.PRISM_PORT}} --cors --dynamic >/dev/null 2>&1 &
          PRISM_PID=$!
          STARTED_PRISM=1
          sleep 1
        fi
        cd {{.GEN_OUT}}
        bun install
        API_BASE_URL=http://127.0.0.1:{{.PRISM_PORT}} npx @modelcontextprotocol/inspector --cli bun src/server.ts --method tools/list || true
        if [ "$STARTED_PRISM" = "1" ]; then kill $PRISM_PID 2>/dev/null || true; fi
        '

  prism:inspect:ui:
    desc: Generate server, run Prism, and open MCP Inspector UI
    cmds:
      - task: gen:petstore
      - |
        bash -lc '
        set -eo pipefail
        STARTED_PRISM=0
        if bash -c "exec 3<>/dev/tcp/127.0.0.1/{{.PRISM_PORT}}" 2>/dev/null; then
          echo "Reusing existing Prism on port {{.PRISM_PORT}}"
        else
          bunx @stoplight/prism-cli mock {{.SPEC_PATH}} --port {{.PRISM_PORT}} --cors --dynamic >/dev/null 2>&1 &
          PRISM_PID=$!
          STARTED_PRISM=1
          sleep 1
        fi
        cd {{.GEN_OUT}}
        bun install
        API_BASE_URL=http://127.0.0.1:{{.PRISM_PORT}} npx @modelcontextprotocol/inspector bun src/server.ts || true
        if [ "$STARTED_PRISM" = "1" ]; then kill $PRISM_PID 2>/dev/null || true; fi
        '

  prism:smoke:
    desc: Generate + install + run Prism + Inspector CLI (chained)
    cmds:
      - task: gen:petstore
      - task: install:petstore
      - |
        bash -lc '
        set -eo pipefail
        STARTED_PRISM=0
        if bash -c "exec 3<>/dev/tcp/127.0.0.1/{{.PRISM_PORT}}" 2>/dev/null; then
          echo "Reusing existing Prism on port {{.PRISM_PORT}}"
        else
          bunx @stoplight/prism-cli mock {{.SPEC_PATH}} --port {{.PRISM_PORT}} --cors --dynamic >/dev/null 2>&1 &
          PRISM_PID=$!
          STARTED_PRISM=1
          sleep 1
        fi
        cd {{.GEN_OUT}}
        API_BASE_URL=http://127.0.0.1:{{.PRISM_PORT}} npx @modelcontextprotocol/inspector --cli bun src/server.ts --method tools/list || true
        if [ "$STARTED_PRISM" = "1" ]; then kill $PRISM_PID 2>/dev/null || true; fi
        '

  # Split utility tasks for granular control and CI use
  build:core:
    desc: Build core package only (via turbo)
    cmds:
      - bunx turbo run build --filter=@workspace/core

  build:cli:
    desc: Build CLI package only (via turbo)
    cmds:
      - bunx turbo run build --filter=@workspace/cli

  typecheck:core:
    desc: Typecheck core only (via turbo)
    cmds:
      - bunx turbo run typecheck --filter=@workspace/core

  typecheck:cli:
    desc: Typecheck CLI only (via turbo)
    cmds:
      - bunx turbo run typecheck --filter=@workspace/cli

  test:cli:help:
    desc: Smoke test CLI help/version
    cmds:
      - bun run packages/cli/src/index.ts -- --help
      - bun run packages/cli/src/index.ts -- --version

  test:gen:petstore:
    desc: Generate and assert expected files exist
    cmds:
      - task: gen:petstore
      - bash -lc 'test -f {{.GEN_OUT}}/src/server.ts && test -f {{.GEN_OUT}}/src/tools.ts && echo OK || (echo "Missing generated files" && exit 1)'
